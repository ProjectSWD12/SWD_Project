{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"TourGuide Manager \ud83d\ude80","text":"<p>A software development project for Innopolis University. This repository contains the source code and documentation for our MVP releases.</p>"},{"location":"#live-demo","title":"\ud83d\udccd Live Demo","text":"<p>[\ud83d\udc49 Deployed Version] - \u2002 -  </p> <p></p> <p></p>"},{"location":"#table-of-contents","title":"\ud83d\udccc Table of Contents","text":"<ul> <li>About the Project</li> <li>Project Context</li> <li>Feature Roadmap</li> <li>Usage Guide</li> <li>Installation &amp; Deployment</li> <li>docs</li> <li>CHANGELOG.md</li> <li>LICENSE</li> </ul>"},{"location":"#about-the-project","title":"\ud83e\udde0 About the Project","text":"<p>This project aims to centralize and streamline tour-guide management by providing a single, always-up-to-date hub for routes, payment status, statistics, participant lists, and direct manager communication-eliminating the need for scattered Telegram notifications. Our goals are: - \u2705 Deliver a user-friendly MVP - \u2705 Gather feedback via customer testing - \u2705 Improve usability and performance iteratively</p> <p>It is built using technologies such as Flutter, Firebase, and GitHub Actions for CI/CD.</p>"},{"location":"#project-context","title":"\ud83d\udc65 Project Context","text":"<p>Stakeholders: - Customers: Karina Shavalieva (@K_Arbyzova), Hannanov Rishat (@RishatHannanov) - Developers:</p> Participant Role GitHub Link Aleksey Chegaev Team Lead, Configure Database github.com/wyroxx Aleksandr Medvedev Flutter Developer github.com/BearAx Nikita Shankin Flutter Developer github.com/Mysteri0K1ng Georgii Beliaev Web-Developer github.com/JoraXD Alexander Simonov Web-Developer github.com/AlexbittIT <p>External Systems: - Firebase Authentication - Firestore Database - Telegram Bot API (if used)</p> <p>\ud83d\udccc Context Diagram:  </p> <p>Stakeholders and external systems at a glance.</p> <p></p>"},{"location":"#feature-roadmap","title":"\u2705 Feature Roadmap","text":"Feature (MVP tag) Status User Login / Auth (v1.0) \u2705 Implemented Excursion Listing (v1.0) \u2705 Implemented Profile Management (v1.0) \u2705 Implemented Guide's Calendar Integration (v1.0) \u2705 Implemented Admin's Calendar Integration (v2.0) \u2705 Implemented Blacklist of Users (v2.0) \u2705 Implemented Blacklist of Guides (v2.0) \u2705 Implemented Application Window (v2.0) \u2705 Implemented Customer Feedback &amp; Testing \u23f3 In Progress Real Time Notifications (v3.0) \u2b1c Planned"},{"location":"#usage-guide","title":"\ud83e\uddfe Usage Guide","text":"<ol> <li>Visit the Guide Interaface</li> <li>Register in with your credentials</li> <li>Use the calendar to browse excursions</li> <li>Visit the Admin Interface</li> <li>Manage Excursions</li> </ol> <p>Even users who say \u201cI just copy and paste without reading\u201d will find the interface intuitive and straightforward.</p>"},{"location":"#installation-deployment","title":"Installation &amp; Deployment","text":""},{"location":"#prerequisites","title":"Prerequisites","text":"Tool Version Flutter 3.22+ Dart 3.4+ React 18.2.0 Python 3.12.4 Firebase CLI 12+ Node.js (for scripts) 18+"},{"location":"#local-setup","title":"Local setup","text":"<p>```bash git clone https://github.com/ProjectSWD12/SWD_Project.git cd SWD_Project flutter pub get                 # install dependencies flutter run                     # launch on device or web</p>"},{"location":"CHANGELOG/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog and this project adheres to Semantic Versioning.</p>"},{"location":"CHANGELOG/#unreleased","title":"[Unreleased]","text":""},{"location":"CHANGELOG/#added","title":"Added","text":"<ul> <li>Initial draft of Unreleased section to collect upcoming changes.</li> </ul>"},{"location":"CHANGELOG/#300-2025-07-21","title":"[3.0.0] - 2025-07-21","text":""},{"location":"CHANGELOG/#added_1","title":"Added","text":"<ul> <li>Real-time Notifications</li> </ul>"},{"location":"CHANGELOG/#changed","title":"Changed","text":"<ul> <li>Interface (colors)</li> </ul>"},{"location":"CHANGELOG/#fixed","title":"Fixed","text":"<ul> <li>Duplicate excursion entries when switching dates quickly.</li> </ul>"},{"location":"CHANGELOG/#200-2025-07-14","title":"[2.0.0] - 2025-07-14","text":""},{"location":"CHANGELOG/#added_2","title":"Added","text":"<ul> <li>Full Admin Interface</li> <li>Automatic Cleaning of the Database</li> <li>Application Window</li> </ul>"},{"location":"CHANGELOG/#changed_1","title":"Changed","text":"<ul> <li>Redesigned profile page for clearer plan information.</li> </ul>"},{"location":"CHANGELOG/#fixed_1","title":"Fixed","text":"<ul> <li>website scaling</li> </ul>"},{"location":"CHANGELOG/#100-2025-06-23","title":"[1.0.0] - 2025-06-23","text":""},{"location":"CHANGELOG/#added_3","title":"Added","text":"<ul> <li>First public MVP:</li> <li>User authentication (Firebase Auth)</li> <li>Guide calendar</li> <li>Full Profile management</li> </ul>"},{"location":"LICENSE/","title":"License","text":"<p>MIT License</p> <p>Copyright (c) 2025 ProjectSWD12</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \u201cSoftware\u201d), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"secrets-management/","title":"Secrets Management","text":"<p>This project uses GitHub Secrets to securely store sensitive data like API keys and tokens.</p>"},{"location":"secrets-management/#secrets-used","title":"Secrets used:","text":"Secret Name Description Usage Location <code>FIREBASE_API_KEY</code> API Key for Firebase API access GitHub Actions and project code <code>FIREBASE_SERVICE_ACCOUNT</code> Firebase service account JSON GitHub Actions deployment <code>TELEGRAM_BOT_TOKEN</code> Telegram bot token (optional) Telegram bot and GitHub Actions"},{"location":"secrets-management/#example-usage-in-github-actions","title":"Example usage in GitHub Actions:","text":"<p>```yaml env:   FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}   TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}</p>"},{"location":"architecture/architecture/","title":"Architecture Overview","text":""},{"location":"architecture/architecture/#static-view","title":"Static View","text":"<p>Shows the system\u2019s structure at rest. List the main modules, services, or libraries, the APIs they expose, and the compile-time or package-time dependencies between them. A reviewer should be able to see which parts can be replaced independently and where tight coupling may cause ripple effects.</p>"},{"location":"architecture/architecture/#dynamic-view","title":"Dynamic View","text":"<p>Captures the behaviour of the system during a single, meaningful scenario (e.g., \u201cuser searches the gallery\u201d). It traces the exact order of calls, data formats, error paths, and latency-critical hops across objects or services. This helps spot race conditions, redundant round-trips, and security gaps.</p>"},{"location":"architecture/architecture/#deployment-view","title":"Deployment View","text":"<p>Describes the runtime topology: which containers/services run on which nodes, what networks and ports connect them, and which cloud resources are involved (DB, queue, CDN, secrets store, etc.). Include redundancy (replicas, zones) and scaling units, so Ops can gauge fault tolerance and cost.</p>"},{"location":"architecture/architecture/#module-view","title":"Module View","text":"<p>This diagram provides a high-level overview of the system architecture showing: - Core components and their responsibilities - Key data flows and dependencies - Deployment processes - Security relationships</p>"},{"location":"architecture/architecture/#tech-stack","title":"Tech Stack","text":"<ul> <li>Flutter (Dart)</li> <li>React</li> <li>Python</li> <li>Firebase</li> <li>GitHub Actions</li> </ul>"},{"location":"automation/continuous-delivery/","title":"Continuous Delivery (CD)","text":"<p>This project uses GitHub Actions to automatically deploy the application after successful CI builds, allowing rapid delivery of new features and improvements to users.</p>"},{"location":"automation/continuous-delivery/#deployment-overview","title":"Deployment Overview","text":"<p>Continuous Delivery is configured for two main parts:</p>"},{"location":"automation/continuous-delivery/#1-flutter-web-application","title":"1. Flutter Web Application","text":"<ul> <li>Deployment target: Firebase Hosting</li> <li>Trigger: Automatically on every push to <code>main</code></li> </ul>"},{"location":"automation/continuous-delivery/#2-admin-web-application","title":"2. Admin Web Application","text":"<ul> <li>Deployment target: Vercel Hosting</li> <li>Trigger: Automatically on every push to <code>main</code></li> </ul>"},{"location":"automation/continuous-delivery/#github-actions-workflow-example-for-flutter-firebase-hosting","title":"GitHub Actions Workflow Example for Flutter (Firebase Hosting):","text":"<p><code>.github/workflows/flutter-deploy.yml</code></p> <p>```yaml name: Deploy Flutter to Firebase</p> <p>on:   push:     branches: [main]</p> <p>jobs:   deploy_flutter:     runs-on: ubuntu-latest     steps:       - uses: actions/checkout@v4</p> <pre><code>  - uses: subosito/[email\u00a0protected]\n    with:\n      flutter-version: '3.x'\n\n  - name: Install Flutter dependencies\n    run: flutter pub get\n\n  - name: Build Flutter web app\n    run: flutter build web\n\n  - name: Deploy to Firebase Hosting\n    uses: FirebaseExtended/[email\u00a0protected]\n    with:\n      firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}\n      projectId: your-firebase-project-id\n      channelId: live\n</code></pre>"},{"location":"automation/continuous-integration/","title":"Continuous Integration (CI)","text":"<p>This project uses GitHub Actions to automatically test, analyze, and build the code upon every commit and pull request, ensuring consistent quality and reliability.</p>"},{"location":"automation/continuous-integration/#ci-pipeline-overview","title":"CI Pipeline Overview","text":"<p>The CI pipeline covers two main parts of our project:</p>"},{"location":"automation/continuous-integration/#1-flutter-application","title":"1. Flutter Application","text":"<ul> <li>Dependency Installation: <code>flutter pub get</code></li> <li>Code Analysis: <code>flutter analyze</code></li> <li>Automated Testing: <code>flutter test</code></li> </ul>"},{"location":"automation/continuous-integration/#2-admin-web-application","title":"2. Admin Web Application","text":"<ul> <li>Dependency Installation: <code>npm ci</code></li> <li>Code Analysis: <code>npm run lint</code></li> <li>Automated Testing: <code>npm run test</code></li> <li>Build Check: <code>npm run build</code></li> </ul>"},{"location":"automation/continuous-integration/#example-github-actions-workflow-ciyml","title":"Example GitHub Actions Workflow (<code>ci.yml</code>):","text":"<p>```yaml name: CI Pipeline on:   push:      branches: [main]   pull_request:     branches: [main]</p> <p>jobs:   flutter_ci:     runs-on: ubuntu-latest     steps:       - uses: actions/checkout@v4       - uses: subosito/[email\u00a0protected]         with:           flutter-version: '3.x'       - name: Install dependencies         run: flutter pub get       - name: Analyze code         run: flutter analyze       - name: Run tests         run: flutter test</p> <p>admin_ci:     runs-on: ubuntu-latest     steps:       - uses: actions/checkout@v4       - uses: actions/setup-node@v3         with:           node-version: '16'       - name: Install dependencies         run: npm ci       - name: Lint code         run: npm run lint       - name: Run tests         run: npm run test       - name: Build Admin panel         run: npm run build</p>"},{"location":"quality-assurance/automated-tests/","title":"Automated Tests","text":"<p>Automated tests help maintain high-quality software, verify correctness, and ensure new changes don't break existing functionality.</p>"},{"location":"quality-assurance/automated-tests/#testing-strategy","title":"Testing Strategy","text":"<p>The project covers critical logic with automated tests across both components:</p> <ul> <li>Flutter Application </li> <li>Unit tests</li> <li> <p>Widget tests</p> </li> <li> <p>Admin Web Panel </p> </li> <li>Unit tests</li> <li>Integration tests</li> </ul>"},{"location":"quality-assurance/automated-tests/#test-locations","title":"Test Locations","text":"Component Test Types Directory Command Flutter Application Unit, Widget <code>tour_guide_manager/test</code> <code>flutter test</code> Admin Panel Unit, Integration <code>Admin/tests</code> <code>npm run test</code>"},{"location":"quality-assurance/automated-tests/#running-tests-locally","title":"Running Tests Locally","text":""},{"location":"quality-assurance/automated-tests/#flutter-tests","title":"Flutter tests","text":"<p>```bash flutter pub get flutter test flutter test --coverage # generates a coverage report</p>"},{"location":"quality-assurance/user-acceptance-tests/","title":"User Acceptance Tests (UAT)","text":"<p>Our project regularly undergoes User Acceptance Testing to ensure that it meets stakeholder expectations.</p>"},{"location":"quality-assurance/user-acceptance-tests/#uat-procedure","title":"UAT Procedure","text":"<ol> <li>Define test scenarios based on user stories (available via the link: https://github.com/users/ProjectSWD12/projects/1).</li> <li>Involve actual users (tour guides, admins).</li> <li>Perform tests on staging or production environments.</li> <li>Collect and document feedback.</li> </ol>"},{"location":"quality-assurance/user-acceptance-tests/#example-uat-scenarios","title":"Example UAT scenarios","text":"Scenario Expected Outcome Status Guide logs in using Firebase Auth Successful login without errors \u2705 Passed Guide views assigned excursions Correct list displayed \u2705 Passed Admin updates excursion details Changes reflected immediately \u2705 Passed Admin blacklists a user User blocked from logging in \u2705 Passed Guide accesses statistics page Correct and up-to-date data shown \ud83d\udea7 In progress"},{"location":"quality-assurance/user-acceptance-tests/#reporting","title":"Reporting","text":"<ul> <li>Issues found during UAT are reported via GitHub Issues with the <code>UAT</code> label.</li> <li>All findings discussed and prioritized with stakeholders.</li> </ul>"},{"location":"quality-attributes/quality-attribute-scenarios/","title":"Quality Attribute Scenarios","text":""},{"location":"quality-attributes/quality-attribute-scenarios/#functional-suitability","title":"Functional Suitability","text":""},{"location":"quality-attributes/quality-attribute-scenarios/#functional-correctness","title":"Functional Correctness","text":"<p>Functional correctness is the degree to which the software provides accurate results and behaves exactly as intended. It is a fundamental quality because software that behaves incorrectly is unusable.</p> <p>High correctness reduces bugs, improves reliability, and builds user trust.</p>"},{"location":"quality-attributes/quality-attribute-scenarios/#scenario-1-saving-a-valid-tour-entry","title":"Scenario 1: Saving a Valid Tour Entry","text":"<ul> <li>Source: Authorized user (e.g., tour manager)  </li> <li>Stimulus: User submits a form with valid data to create a new tour  </li> <li>Environment: Normal operation, database is accessible  </li> <li>Artifact: Tour management module and database  </li> <li>Response: System saves the tour and shows a success confirmation  </li> <li>Response Measure: Tour record appears in the database and user sees a success message within \u22642 seconds  </li> <li>How to Test: Create a tour using valid data via UI/API. Verify data in the database and check for confirmation message.</li> </ul>"},{"location":"quality-attributes/quality-attribute-scenarios/#scenario-2-handling-invalid-tour-input","title":"Scenario 2: Handling Invalid Tour Input","text":"<ul> <li>Source: User  </li> <li>Stimulus: User submits a form with invalid or missing fields  </li> <li>Environment: Normal operation  </li> <li>Artifact: Input validation logic and data storage layer  </li> <li>Response: Validation error is shown, and no data is saved  </li> <li>Response Measure: No new record in the database; user sees a clear error message  </li> <li>How to Test: Submit a form with empty/invalid fields. Confirm error message is shown and nothing is saved to the database.</li> </ul>"},{"location":"quality-attributes/quality-attribute-scenarios/#compatibility","title":"Compatibility","text":""},{"location":"quality-attributes/quality-attribute-scenarios/#interoperability","title":"Interoperability","text":"<p>Interoperability is the system's ability to communicate with other systems and exchange data. It\u2019s important to support external services like Telegram and avoid isolated systems.</p>"},{"location":"quality-attributes/quality-attribute-scenarios/#scenario-1-processing-a-request-from-telegram-bot","title":"Scenario 1: Processing a Request from Telegram Bot","text":"<ul> <li>Source: Telegram Bot  </li> <li>Stimulus: A user request (e.g., for tour info) sent via Telegram  </li> <li>Environment: System is deployed and accessible over the internet  </li> <li>Artifact: API endpoint for the bot  </li> <li>Response: The request is processed and a result is returned to the user via Telegram  </li> <li>Response Measure: Telegram user receives a response within \u22642 seconds; data is correct; system returns HTTP 200  </li> <li>How to Test: Send a request via Telegram or simulate it via webhook/Postman. Verify correct data and logs.</li> </ul>"},{"location":"quality-attributes/quality-attribute-scenarios/#scenario-2-sending-notification-to-telegram-user","title":"Scenario 2: Sending Notification to Telegram User","text":"<ul> <li>Source: System  </li> <li>Stimulus: Tour booking is confirmed  </li> <li>Environment: Internet connection and Telegram API are available  </li> <li>Artifact: Notification module  </li> <li>Response: Notification is sent to the user via Telegram  </li> <li>Response Measure: Message is received, HTTP 200 from Telegram API, message content is correct  </li> <li>How to Test: Trigger a booking confirmation. Check message delivery in Telegram and validate logs and API response.</li> </ul>"},{"location":"quality-attributes/quality-attribute-scenarios/#portability","title":"Portability","text":""},{"location":"quality-attributes/quality-attribute-scenarios/#adaptability","title":"Adaptability","text":"<p>Adaptability is the degree to which the software can be ported to other environments or changed for new needs with minimal effort. It ensures the system can scale or evolve over time.</p>"},{"location":"quality-attributes/quality-attribute-scenarios/#scenario-1-deploying-on-a-new-platform","title":"Scenario 1: Deploying on a New Platform","text":"<ul> <li>Source: Developer/Operations decision  </li> <li>Stimulus: System needs to be deployed on a new OS or hosting provider  </li> <li>Environment: Maintenance/setup phase; new environment is available  </li> <li>Artifact: Deployment scripts, configuration, and source code  </li> <li>Response: System runs correctly with minimal adjustments  </li> <li>Response Measure: &lt;5% code changes, &lt;1 hour downtime, all tests pass  </li> <li>How to Test: Install and run the system in the new environment. Record what needed to be changed and validate via automated tests.</li> </ul>"},{"location":"quality-attributes/quality-attribute-scenarios/#scenario-2-adding-a-new-notification-channel-eg-slack","title":"Scenario 2: Adding a New Notification Channel (e.g., Slack)","text":"<ul> <li>Source: New customer requirement or feature  </li> <li>Stimulus: Need to integrate a new notification service  </li> <li>Environment: Development phase; architecture allows for extensions  </li> <li>Artifact: Integration module  </li> <li>Response: New service added without refactoring; both integrations work  </li> <li>Response Measure: &lt;20 hours to implement; &lt;10 lines of existing code changed; tests pass  </li> <li>How to Test: Create a new integration module, test it with mock or real service, and ensure existing Telegram functionality still works.</li> </ul>"},{"location":"reports/ai-usage/","title":"AI-Usage Report","text":""},{"location":"reports/ai-usage/#assignment-1","title":"Assignment 1","text":"<p>Assignment 1</p> <ul> <li>AI helped us in translation and in drawing up possible criteria for qualitative <code>analysis table</code>.</li> </ul>"},{"location":"reports/ai-usage/#assignment-2","title":"Assignment 2","text":"<p>Assignment 2</p> <ul> <li>We used AI tool DeepSeek so that he could help us create an API, understand the concept of <code>DEEP</code>, and also provide code for <code>PlantUML</code>, which we later fixed and supplemented.</li> </ul>"},{"location":"reports/ai-usage/#assignment-3","title":"Assignment 3","text":"<p>Assignment 3</p> <ul> <li>We use AI tools in GitHub processes.</li> </ul>"},{"location":"reports/ai-usage/#assignment-4","title":"Assignment 4","text":"<p>Assignment 4</p> <ul> <li>We use AI tools in GitHub processes to manage <code>QA tools &amp; CI pipeline</code>.</li> </ul>"},{"location":"reports/ai-usage/#assignment-5","title":"Assignment 5","text":"<p>Assignment 5</p> <ul> <li>We used AI when working with github, as well as when creating diagrams.</li> </ul>"},{"location":"reports/ai-usage/#assignment-6","title":"Assignment 6","text":"<p>Assignment 6</p> <ul> <li>We used AI when working with github <code>README.md</code>, with <code>documentary</code> and with all .md files in the <code>docs/</code>.</li> </ul>"},{"location":"reports/ai-usage/#assignment-7","title":"Assignment 7","text":"<p>Assignment 7</p> <ul> <li>We used AI when working with github <code>README.md</code> and with <code>reports/</code>.</li> </ul>"},{"location":"reports/transition-report/","title":"Transition Report","text":""},{"location":"reports/transition-report/#product-status","title":"Product Status","text":"<ul> <li>Is the product complete?</li> <li></li> <li>Which parts are done and which aren\u2019t done?   *</li> </ul>"},{"location":"reports/transition-report/#customer-usage","title":"Customer Usage","text":"<ul> <li>Is the customer using the product?</li> <li></li> <li>How often?   *</li> <li>In what way?</li> <li></li> <li>If not, why not?   *</li> </ul>"},{"location":"reports/transition-report/#deployment-status","title":"Deployment Status","text":"<ul> <li>Has the customer deployed the product on their side?   *</li> </ul>"},{"location":"reports/transition-report/#transition-requirements","title":"Transition Requirements","text":"<ul> <li>What measures need to be taken to fully transition the product?   *</li> </ul>"},{"location":"reports/transition-report/#future-plans","title":"Future Plans","text":"<ul> <li>What are the customer\u2019s plans for the product after its delivery?   *</li> <li>Are they going to continue working on it?   *</li> <li>Would they like to continue collaborating with the team and on what conditions?   *</li> </ul>"},{"location":"reports/transition-report/#post-delivery-value","title":"Post-Delivery Value","text":"<ul> <li>How to increase the chance that it\u2019ll be useful after the final delivery?   *</li> </ul>"},{"location":"reports/transition-report/#link-to-the-video-call","title":"Link to the Video Call","text":"<ul> <li>Link</li> </ul>"},{"location":"reports/transition-report/#customer-feedback-on-readme","title":"Customer Feedback on README","text":"<ul> <li>[x] Is everything clear? What can be improved?</li> <li>[x] Are they able to launch/deploy using your instructions?</li> <li>[x] What two other sections would the customer like included in the ReadMe?</li> </ul>"}]}